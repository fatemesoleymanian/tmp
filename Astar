import heapq

def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

def astar(graph, start, goal):
    heap = [(0, start)]
    visited = set()

    while heap:
        (cost, current) = heapq.heappop(heap)

        if current == goal:
            return cost

        if current in visited:
            continue

        visited.add(current)

        for neighbor in graph[current]:
            heapq.heappush(heap, (cost + graph[current][neighbor] + heuristic(neighbor, goal), neighbor))

    return float('inf')  # No path found

# Example usage:
graph = {
    (0, 0): {(0, 1): 1, (1, 0): 1},
    (0, 1): {(0, 0): 1, (1, 1): 1},
    (1, 0): {(0, 0): 1, (1, 1): 1},
    (1, 1): {(0, 1): 1, (1, 0): 1}
}

start_node = (0, 0)
goal_node = (1, 1)

result = astar(graph, start_node, goal_node)

print(f"Shortest path cost from {start_node} to {goal_node}: {result}")
